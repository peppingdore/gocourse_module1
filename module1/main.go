package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"time"

	// "time"
	"bufio"
	"os"
	"strconv"
	"strings"
)

var scanner *bufio.Scanner

func readLine() string {
	if scanner.Scan() {
		line := scanner.Text()
		return line
	}
	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
	log.Fatal("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
	return ""
}

func pickDifficulty() (size int, attempts int) {
	fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: Easy, Medium, Hard")
	for true {
		line := readLine()
		line = strings.ToLower(line)
		if line == "easy" {
			return 50, 15
		} else if line == "medium" {
			return 100, 10
		} else if line == "hard" {
			return 200, 5
		} else {
			fmt.Println("–¢–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
		}
	}
	return 0, 0
}

func getDistanceHint(target int, guess int) string {
	diff := target - guess
	if diff < 0 { diff = -diff } // get abs distance

	if diff <= 5 {
		return "–ì–æ—Ä—è—á–æ üî•"
	} else if diff <= 15 {
		return "–¢–µ–ø–ª–æ üôÇ"
	} else {
		return "–•–æ–ª–æ–¥–Ω–æ ‚ùÑÔ∏è" 
	}
}

type OnePlayResult struct {
	Date time.Time
	DidWin bool
	Attempts int
}

type ResultsJson struct {
	Plays []OnePlayResult
}

var results ResultsJson

func loadResults() {
	jsonFile, e := os.Open("results.json")
	if e != nil {
		fmt.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å results.json")
		log.Print(e)
		return
	}
	e = json.NewDecoder(jsonFile).Decode(&results)
	if e != nil {
		fmt.Println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å results.json")
		log.Print(e)
		results = ResultsJson{}
	}
	jsonFile.Close()
}

func saveResults() {
	jsonFile, e := os.OpenFile("results_new.json", os.O_CREATE | os.O_RDWR | os.O_TRUNC, 0644)
	if e != nil {
		log.Fatal(e)
	}
	e = json.NewEncoder(jsonFile).Encode(results)
	if e != nil {
		fmt.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å results.json")
		log.Print(e)
	}
	jsonFile.Close()
	os.Rename("results_new.json", "results.json")
}

func main() {
	scanner = bufio.NewScanner(os.Stdin)
	
	loadResults()

	for true {
		targetSize, attempts := pickDifficulty()
		startingAttempts := attempts

		fmt.Printf("–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' - –æ—Ç 1 –¥–æ %v –Ω–∞—á–∞–ª–∞—Å—å!\n", targetSize)
		fmt.Printf("–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –∑–∞ %v –ø–æ–ø—ã—Ç–æ–∫!\n", attempts)

		target := rand.Intn(targetSize) + 1
		attemptHistory := []int{}

		didWin := false

		for attempts > 0 && !didWin {
			line := readLine()
			guess, e := strconv.Atoi(line)
			if e != nil {
				fmt.Println("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
			} else {
				attemptHistory = append(attemptHistory, guess)
				if guess == target {
					didWin = true
				} else if guess < target {
					fmt.Println("–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µüëÜ")
					fmt.Println(getDistanceHint(target, guess))
				} else {
					fmt.Println("–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µüëá")
					fmt.Println(getDistanceHint(target, guess))
				}
			}
			attempts -= 1
		}
		usedAttempts := startingAttempts - attempts
		if didWin {
			fmt.Printf("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∑–∞ %v –ø–æ–ø—ã—Ç–æ–∫\n", usedAttempts)
		} else {
			fmt.Println("–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—ã –ø—Ä–æ–µ–±–∞–ª–∏")
			fmt.Printf("–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ: %v\n", target)
		}
		fmt.Println("–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!")

		results.Plays = append(results.Plays, OnePlayResult{
			Date: time.Now(),
			Attempts: usedAttempts,
			DidWin: didWin,
		})
		saveResults()

		keepGoing := true
		for true {
			fmt.Println("–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑, y/n?")
			line := strings.ToLower(readLine())
			if line == "n" {
				keepGoing = false
				break
			} else if line == "y" {
				break
			}
		}

		if !keepGoing {
			break
		}
	}
}
